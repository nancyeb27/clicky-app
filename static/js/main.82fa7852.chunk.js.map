{"version":3,"sources":["components/ShowPictures.js","components/Wrapper.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["ShowPics","props","react_default","a","createElement","className","onClick","clickCount","id","alt","name","src","image","Wrapper","children","Header","directions","score","highscore","App","state","shows","gameOver","_this","setState","console","log","this","forEach","show","count","alert","concat","find","o","i","sort","Math","random","_this2","src_components_Wrapper","Jumbotron","Container","src_components_Header","map","components_ShowPictures","key","Picture","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"28CAYeA,SATE,SAAAC,GAAK,OACpBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAAS,kBAAML,EAAMM,WAAWN,EAAMO,MAC1DN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,YCDxBC,SAFC,SAAAZ,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,mBCW1CC,SAXA,SAAAd,GAAK,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASJ,EAAMa,UAC9BZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcJ,EAAMe,YACnCd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,UACUJ,EAAMgB,MADhB,eACmChB,EAAMiB,cCwE9BC,oNArEbC,MAAQ,CACNC,QACAJ,MAAO,EACPC,UAAW,KAMbI,SAAW,WAWT,OAVIC,EAAKH,MAAMH,MAAQM,EAAKH,MAAMF,WAChCK,EAAKC,SAAS,CAACN,UAAWK,EAAKH,MAAMH,OAAQ,WAC3CQ,QAAQC,IAAIC,KAAKP,MAAMF,aAG3BK,EAAKH,MAAMC,MAAMO,QAAQ,SAAAC,GACvBA,EAAKC,MAAQ,IAEfC,MAAK,yBAAAC,OAA0BT,EAAKH,MAAMH,QAC1CM,EAAKC,SAAS,CAACP,MAAO,KACf,KAGTV,WAAa,SAAAC,GACXe,EAAKH,MAAMC,MAAMY,KAAK,SAACC,EAAGC,GACxB,GAAID,EAAE1B,KAAOA,EAAI,CACf,GAAsB,IAAnBa,EAAMc,GAAGL,MAQV,OAPAT,EAAMc,GAAGL,MAAQT,EAAMc,GAAGL,MAAQ,EAClCP,EAAKC,SAAS,CAACP,MAAQM,EAAKH,MAAMH,MAAQ,GAAI,WAE3CQ,QAAQC,IAAIlB,KAGfe,EAAKH,MAAMC,MAAMe,KAAK,kBAAMC,KAAKC,SAAW,MACrC,EAIDf,EAAKD,oIAKV,IAAAiB,EAAAZ,KACP,OACEzB,EAAAC,EAAAC,cAACoC,EAAD,KACItC,EAAAC,EAAAC,cAACqC,EAAA,EAAD,KACEvC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,KACGxC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,gCACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,KACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,+FAINH,EAAAC,EAAAC,cAACuC,EAAD,CAAQ1B,MAAOU,KAAKP,MAAMH,MAAOC,UAAWS,KAAKP,MAAMF,WAAvD,iBACCS,KAAKP,MAAMC,MAAMuB,IAAI,SAAAf,GAAI,OACxB3B,EAAAC,EAAAC,cAACyC,EAAD,CACGtC,WAAYgC,EAAKhC,WACjBC,GAAIqB,EAAKrB,GACTsC,IAAKjB,EAAKrB,GACVI,MAAOiB,EAAKkB,oBA9DRC,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.82fa7852.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./ShowPictures.css\"\r\n\r\nconst ShowPics = props => (\r\n  <div className=\"show\" onClick={() => props.clickCount(props.id)}>\r\n    <div className=\"img-container\">\r\n      <img alt={props.name} src={props.image} />\r\n    </div>\r\n  </div>\r\n);\r\n\r\n\r\nexport default ShowPics;\r\n\r\n\r\n","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = props => (\r\n  <div className=\"header\">\r\n    <div className=\"title\">{props.children}</div>\r\n    <div className=\"directions\">{props.directions}</div>\r\n    <div className=\"scores\">\r\n      Score: {props.score} Highscore: {props.highscore}\r\n    </div>\r\n  </div>\r\n);\r\n\r\n\r\nexport default Header;","import React, { Component } from 'react';\nimport { Jumbotron, Container,  } from 'reactstrap';\nimport ShowPic from \"./components/ShowPictures\";\nimport Wrapper from \"./components/Wrapper\";\nimport shows from \"./shows.json\"\nimport Header from \"./components/Header\";\nimport './App.css';\n\n\nclass App extends Component {\n  // Setting this.state.cards to the cards json array\n  state = {\n    shows,     \n    score: 0,\n    highscore: 0\n  };\n\n  componentDidMount() {\n  }\n\n  gameOver = () => {\n    if (this.state.score > this.state.highscore) {\n      this.setState({highscore: this.state.score}, function() {\n        console.log(this.state.highscore);\n      });\n    }\n    this.state.shows.forEach(show => {\n      show.count = 0;\n    });\n    alert(`Game Over :( \\nscore: ${this.state.score}`);\n    this.setState({score: 0});\n    return true;\n  }\n\n  clickCount = id => {\n    this.state.shows.find((o, i) => {\n      if (o.id === id) {\n        if(shows[i].count === 0){\n          shows[i].count = shows[i].count + 1;\n          this.setState({score : this.state.score + 1}, function(){\n            // console.log(this.state.score);\n             console.log(id);\n          \n          });\n          this.state.shows.sort(() => Math.random() - 0.5)\n          return true; \n        // } else if(o.id === 0){\n        //  this.gameOver();\n        \n        } else {this.gameOver ()};\n      }\n    });\n  }\n  // Map over this.state.shows and render a cardCard component for each card object\n  render() {\n    return (\n      <Wrapper>\n          <Jumbotron >\n            <Container >\n               <h1 className=\"text-primary\">Broadway Musical Memory Game</h1>\n               <p className=\"text-primary\"> </p>\n               <p className=\"text-primary\">Click on a playbill to earn points --Be careful, game will end if you click a show twice!</p>\n            </Container>\n          </Jumbotron>\n      \n         <Header score={this.state.score} highscore={this.state.highscore}> Clicky Game </Header>\n         {this.state.shows.map(show => (\n           <ShowPic\n              clickCount={this.clickCount}\n              id={show.id}\n              key={show.id}\n              image={show.Picture}\n            />\n        ))}\n        \n      </Wrapper>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}